Consider the following LL(1) grammar matching the token sequence "dedde":

r1. A -> B<cb=cb1> C ;
r2. B -> C<cb=cb2> D ;
r3. C -> D<cb=cb3> E ;
r4. D -> d<cb=cb4>;
r5. E -> e<cb=cb5>;

1. Init:
Fi(A) = {}
Fi(B) = {}
Fi(C) = {}
Fi(D) = {}
Fi(E) = {}

2.
Fi(e<cb=cb5>) = {e<cb=cb5>}
Fi(d<cb=cb4>) = {d<cb=cb4>}
Fi(D<cb=cb3> E) = {}
Fi(C<cb=cb2> D) = {}
Fi(B<cb=cb1> C) = {}

3.
Fi(A) = {}
Fi(B) = {}
Fi(C) = {}
Fi(D) = {d<cb=cb4>}
Fi(E) = {e<cb=cb5>}

2.
Fi(e<cb=cb5>) = {e<cb=cb5>}
Fi(d<cb=cb4>) = {d<cb=cb4>}
Fi(D<cb=cb3> E) = {d<cb=cb3,cb4>} <- cb3 taken into account!
Fi(C<cb=cb2> D) = {}
Fi(B<cb=cb1> C) = {}

3.
Fi(A) = {}
Fi(B) = {}
Fi(C) = {d<cb=cb3,cb4>}
Fi(D) = {d<cb=cb4>}
Fi(E) = {e<cb=cb5>}

2.
Fi(e<cb=cb5>) = {e<cb=cb5>}
Fi(d<cb=cb4>) = {d<cb=cb4>}
Fi(D<cb=cb3> E) = {d<cb=cb3,cb4>}
Fi(C<cb=cb2> D) = {d<cb=cb2,cb3,cb4>} <- cb2 taken into account!
Fi(B<cb=cb1> C) = {}

3.
Fi(A) = {}
Fi(B) = {d<cb=cb2,cb3,cb4>}
Fi(C) = {d<cb=cb3,cb4>}
Fi(D) = {d<cb=cb4>}
Fi(E) = {e<cb=cb5>}

2.
Fi(e<cb=cb5>) = {e<cb=cb5>}
Fi(d<cb=cb4>) = {d<cb=cb4>}
Fi(D<cb=cb3> E) = {d<cb=cb3,cb4>}
Fi(C<cb=cb2> D) = {d<cb=cb2,cb3,cb4>}
Fi(B<cb=cb1> C) = {d<cb=cb1,cb2,cb3,cb4>} <- cb1 taken into account!

3.
Fi(A) = {d<cb=cb1,cb2,cb3,cb4>}
Fi(B) = {d<cb=cb2,cb3,cb4>}
Fi(C) = {d<cb=cb3,cb4>}
Fi(D) = {d<cb=cb4>}
Fi(E) = {e<cb=cb5>}

Now everything has been calculated. The next iteration will change nothing.

Fo:

1.
Fo(A) = {}
Fo(B) = {}
Fo(C) = {}
Fo(D) = {}
Fo(E) = {}

r1. A -> B<cb=cb1> C ;
r2. B -> C<cb=cb2> D ;
r3. C -> D<cb=cb3> E ;
r4. D -> d<cb=cb4>;
r5. E -> e<cb=cb5>;

2, iter1:
Fo(B) = Fifunc(C) = {d<cb=cb3,cb4>}
Fo(C) = Fo(A) = {}, unchanged
--
Fo(C) = Fifunc(D) = {d<cb=cb4>}
Fo(D) = Fo(B) = {d<cb=cb3,cb4>}
--
Fo(D) = Fifunc(E) = {e<cb=cb5>}
Fo(E) = Fo(C) = {}

2, iter2:
Fo(B) = Fifunc(C) = {d<cb=cb3,cb4>}, unchanged
Fo(C) = Fo(A) = {}, unchanged
--
Fo(C) = Fifunc(D) = {d<cb=cb4>}, unchanged
Fo(D) = Fo(B) = {d<cb=cb3,cb4>}, unchanged
--
Fo(D) = Fifunc(E) = {e<cb=cb5>}, unchanged
Fo(E) = Fo(C) = {}, unchanged

Now we can construct parse table:

T[A,d] = r1<cb=cb1,cb2,cb3,cb4>
T[A,e] = nil
T[B,d] = r2<cb=cb2,cb3,cb4>
T[B,e] = nil
T[C,d] = r3<cb=cb3,cb4>
T[C,e] = nil
T[D,d] = r4<cb=cb4>
T[D,e] = nil
T[E,d] = nil
T[E,e] = r5<cb=cb5>

Stack consists of these pairs:
(terminal, cb) or (nonterminal, cb)
if encountering terminal, match it with the cb
if encountering nonterminal:
- push the cb onto cb stack
- push pop_cb instruction into main stack
- call fingerprinting by passing the cb stack and the tailor-made DFA and the list of cb lists
- use the T[X,y] decision by applying the rule

TODO: how the interaction with conditionals works?
T[X,y] = {cond1: rN<cb=...>, cond2: rM<cb=...>}

TODO: modification to main stack size calculation
TODO: cb stack size calculation
